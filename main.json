{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1008.15138",
      "templateHash": "5106117127602687225"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "metadata": {
        "description": "Location for the resources."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "User name for the Virtual Machine."
      }
    },
    "authenticationType": {
      "type": "string",
      "metadata": {
        "description": "Type of authentication to use on the Virtual Machine."
      },
      "allowedValues": [
        "password",
        "sshPublicKey"
      ]
    },
    "adminPasswordOrKey": {
      "type": "secureString",
      "metadata": {
        "description": "Password or ssh key for the Virtual Machine."
      }
    },
    "virtualNetwork": {
      "type": "object",
      "metadata": {
        "description": "virtualNetwork properties from VirtualNetworkCombo"
      }
    },
    "cClearVMSize": {
      "type": "string",
      "metadata": {
        "description": "cclear VM size"
      }
    },
    "cClearCount": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Number of cClears"
      }
    },
    "cClearVmName": {
      "type": "string",
      "metadata": {
        "description": "cClear VM Name"
      }
    },
    "cClearImage": {
      "type": "object",
      "metadata": {
        "description": "cClear Image URI"
      }
    },
    "cClearImageURI": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "cClear Image Version"
      }
    },
    "cvuVMSize": {
      "type": "string",
      "metadata": {
        "description": "cvu VM size"
      }
    },
    "cvuCount": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Number of cVus"
      }
    },
    "cvuVmName": {
      "type": "string",
      "metadata": {
        "description": "cVu Base VM Name"
      }
    },
    "cvuImage": {
      "type": "object",
      "metadata": {
        "description": "cvu Image URI"
      }
    },
    "cVuImageURI": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "cvu Image Version"
      }
    },
    "cstorVMSize": {
      "type": "string",
      "metadata": {
        "description": "cvu VM size"
      }
    },
    "cstorCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Number of cStors"
      }
    },
    "cstorVmName": {
      "type": "string",
      "metadata": {
        "description": "cStor VM Name"
      }
    },
    "cstorDiskCount": {
      "type": "int",
      "metadata": {
        "description": "cStor Disk Count"
      }
    },
    "cstorDiskSize": {
      "type": "int",
      "metadata": {
        "description": "cStor Size Count"
      }
    },
    "cstorImage": {
      "type": "object",
      "metadata": {
        "description": "cstor Image URI"
      }
    },
    "cStorImageURI": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "cstor Image Version"
      }
    },
    "tagsByResource": {
      "type": "object",
      "metadata": {
        "description": "tags from TagsByResource"
      }
    }
  },
  "functions": [],
  "variables": {
    "cvulbName": "[format('{0}_iLB', parameters('cvuVmName'))]",
    "cstorlbName": "[format('{0}_iLB', parameters('cstorVmName'))]",
    "linuxConfiguration": {
      "disablePasswordAuthentication": true,
      "ssh": {
        "publicKeys": [
          {
            "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername'))]",
            "keyData": "[parameters('adminPasswordOrKey')]"
          }
        ]
      }
    },
    "cstorilb_enabled": "[if(greater(parameters('cstorCount'), 1), true(), false())]",
    "cvuilb_enabled": "[if(greater(parameters('cvuCount'), 1), true(), false())]",
    "monsubnetId": "[if(equals(parameters('virtualNetwork').newOrExisting, 'new'), resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monSubnet.name), resourceId(parameters('virtualNetwork').resourceGroup, 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monSubnet.name))]",
    "cclearImageURI": "[if(empty(parameters('cClearImageURI')), parameters('cClearImage').id, parameters('cClearImageURI'))]",
    "cstorImageURI": "[if(empty(parameters('cStorImageURI')), parameters('cstorImage').id, parameters('cStorImageURI'))]",
    "cvuImageURI": "[if(empty(parameters('cVuImageURI')), parameters('cvuImage').id, parameters('cVuImageURI'))]"
  },
  "resources": [
    {
      "condition": "[equals(parameters('virtualNetwork').newOrExisting, 'new')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-11-01",
      "name": "[parameters('virtualNetwork').name]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": "[parameters('virtualNetwork').addressPrefixes]"
        }
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/virtualNetworks'), parameters('tagsByResource')['Microsoft.Network/virtualNetworks'], null())]"
    },
    {
      "condition": "[equals(parameters('virtualNetwork').newOrExisting, 'new')]",
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2020-11-01",
      "name": "[format('{0}/{1}', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monSubnet.name)]",
      "properties": {
        "addressPrefix": "[parameters('virtualNetwork').subnets.monSubnet.addressPrefix]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetwork').name)]"
      ]
    },
    {
      "condition": "[greater(parameters('cClearCount'), 0)]",
      "copy": {
        "name": "cclearnic",
        "count": "[length(range(0, parameters('cClearCount')))]"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-11-01",
      "name": "[format('{0}-{1}-nic', parameters('cClearVmName'), range(0, parameters('cClearCount'))[copyIndex()])]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[format('{0}-{1}-ipconfig-nic', parameters('cClearVmName'), range(0, parameters('cClearCount'))[copyIndex()])]",
            "properties": {
              "subnet": {
                "id": "[variables('monsubnetId')]"
              },
              "privateIPAllocationMethod": "Dynamic"
            }
          }
        ]
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkInterfaces'), parameters('tagsByResource')['Microsoft.Network/networkInterfaces'], null())]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monSubnet.name)]"
      ]
    },
    {
      "condition": "[greater(parameters('cClearCount'), 0)]",
      "copy": {
        "name": "cclearvm",
        "count": "[length(range(0, parameters('cClearCount')))]"
      },
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2021-03-01",
      "name": "[format('{0}-{1}', parameters('cClearVmName'), range(0, parameters('cClearCount'))[copyIndex()])]",
      "location": "[parameters('location')]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('cClearVMSize')]"
        },
        "storageProfile": {
          "imageReference": {
            "id": "[variables('cclearImageURI')]"
          },
          "osDisk": {
            "osType": "Linux",
            "createOption": "FromImage",
            "caching": "ReadWrite"
          },
          "dataDisks": [
            {
              "name": "[format('{0}-{1}-DataDisk1', parameters('cClearVmName'), range(0, parameters('cClearCount'))[copyIndex()])]",
              "lun": 1,
              "createOption": "Empty",
              "diskSizeGB": 500,
              "caching": "ReadWrite"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}-nic', parameters('cClearVmName'), range(0, parameters('cClearCount'))[range(0, parameters('cClearCount'))[copyIndex()]]))]"
            }
          ]
        },
        "osProfile": {
          "computerName": "[format('{0}-{1}', parameters('cClearVmName'), range(0, parameters('cClearCount'))[copyIndex()])]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), null(), variables('linuxConfiguration'))]",
          "customData": ""
        }
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Compute/virtualMachines'), parameters('tagsByResource')['Microsoft.Compute/virtualMachines'], null())]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}-nic', parameters('cClearVmName'), range(0, parameters('cClearCount'))[range(0, parameters('cClearCount'))[copyIndex()]]))]"
      ]
    },
    {
      "condition": "[greater(parameters('cstorCount'), 0)]",
      "copy": {
        "name": "cstorcapturenic",
        "count": "[length(range(0, parameters('cstorCount')))]"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-11-01",
      "name": "[format('{0}-{1}-capture-nic', parameters('cstorVmName'), range(0, parameters('cstorCount'))[copyIndex()])]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[format('{0}-{1}-capture-ipconfig-nic', parameters('cstorVmName'), range(0, parameters('cstorCount'))[copyIndex()])]",
            "properties": {
              "subnet": {
                "id": "[variables('monsubnetId')]"
              },
              "privateIPAllocationMethod": "Dynamic",
              "loadBalancerBackendAddressPools": "[if(variables('cstorilb_enabled'), createArray(createObject('id', resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('cstorlbName'), format('{0}-backend', variables('cstorlbName'))))), createArray())]"
            }
          }
        ],
        "enableAcceleratedNetworking": true,
        "enableIPForwarding": true
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkInterfaces'), parameters('tagsByResource')['Microsoft.Network/networkInterfaces'], null())]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/loadBalancers', variables('cstorlbName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monSubnet.name)]"
      ]
    },
    {
      "condition": "[greater(parameters('cstorCount'), 0)]",
      "copy": {
        "name": "cstorvm",
        "count": "[length(range(0, parameters('cstorCount')))]"
      },
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2021-03-01",
      "name": "[format('{0}-{1}', parameters('cstorVmName'), range(0, parameters('cstorCount'))[copyIndex()])]",
      "location": "[parameters('location')]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('cstorVMSize')]"
        },
        "storageProfile": {
          "copy": [
            {
              "name": "dataDisks",
              "count": "[length(range(0, parameters('cstorDiskCount')))]",
              "input": {
                "name": "[format('{0}-{1}-DataDisk-{2}', parameters('cstorVmName'), range(0, parameters('cstorCount'))[copyIndex()], range(0, parameters('cstorDiskCount'))[copyIndex('dataDisks')])]",
                "lun": "[range(0, parameters('cstorDiskCount'))[copyIndex('dataDisks')]]",
                "createOption": "Empty",
                "diskSizeGB": "[parameters('cstorDiskSize')]",
                "caching": "ReadWrite"
              }
            }
          ],
          "imageReference": {
            "id": "[variables('cstorImageURI')]"
          },
          "osDisk": {
            "osType": "Linux",
            "createOption": "FromImage",
            "caching": "ReadWrite"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}-capture-nic', parameters('cstorVmName'), range(0, parameters('cstorCount'))[range(0, parameters('cstorCount'))[copyIndex()]]))]",
              "properties": {
                "primary": true
              }
            }
          ]
        },
        "osProfile": {
          "computerName": "[format('{0}-{1}', parameters('cstorVmName'), range(0, parameters('cstorCount'))[copyIndex()])]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), null(), variables('linuxConfiguration'))]",
          "customData": "IyEvYmluL2Jhc2gKCiMgY1Z1LVYtayBpbmxpbmUgYm9vdCBjb25maWcgc2V0dGluZ3MKY2F0IDw8RU9GX0JPT1RDRkcgPi9ob21lL2NwYWNrZXQvYm9vdF9jb25maWcudHh0CnsKJ3ZtX3R5cGUnOiAnYXp1cmUnLAonY2FwdHVyZV9tb2RlJzogJ2xpYnBjYXAnLAonZGVjYXBfbW9kZSc6ICd2eGxhbicsCidudW1fcGNhcF9idWZzJzogMiwKJ2NhcHR1cmVfbmljX2luZGV4JzogMCwKJ3BjaV93aGl0ZWxpc3QnOiAnMDAwMTowMDowMi4wJywKJ2V0aF9kZXYnOiAnZXRoMCcsCidjb3JlX21hc2snOiAnMHgzJywKJ2J1cm5zaWRlX21vZGUnOiBGYWxzZSwKJ2NzdG9yX2xpdGVfbW9kZSc6IEZhbHNlLAonc3NoJzogeydlbmFibGVkJzogVHJ1ZX0sCidjbGVhbnVwX3RocmVzaG9sZCc6IDUwLAondXNlX2NvbXByZXNzaW9uJzogVHJ1ZSwKJ3J1bl9jZmxvd19tb2RlJzogVHJ1ZSwKJ3RpZXJlZF9zdG9yX2VuJzogRmFsc2UsCidjYXB0dXJlX25pY19ldGgnOiAnZXRoMCcsCidtYW5hZ2VtZW50X25pY19ldGgnOiAnZXRoMCcsCn0KRU9GX0JPT1RDRkcKCmNobW9kIHVnK3cgL2hvbWUvY3BhY2tldC9ib290X2NvbmZpZy50eHQKCmVjaG8gImNsb3VkLWluaXQgcmFuIHVzZXItZGF0YSBhdDogIiAkKGRhdGUpID4+L2hvbWUvY3BhY2tldC9wcmVib290bXNnLnR4dA=="
        }
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Compute/virtualMachines'), parameters('tagsByResource')['Microsoft.Compute/virtualMachines'], null())]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}-capture-nic', parameters('cstorVmName'), range(0, parameters('cstorCount'))[range(0, parameters('cstorCount'))[copyIndex()]]))]"
      ]
    },
    {
      "condition": "[greater(parameters('cvuCount'), 0)]",
      "copy": {
        "name": "cvucapturenic",
        "count": "[length(range(0, parameters('cvuCount')))]"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-11-01",
      "name": "[format('{0}-{1}-capture-nic', parameters('cvuVmName'), range(0, parameters('cvuCount'))[copyIndex()])]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[format('{0}-{1}-capture-ipconfig-nic', parameters('cvuVmName'), range(0, parameters('cvuCount'))[copyIndex()])]",
            "properties": {
              "subnet": {
                "id": "[variables('monsubnetId')]"
              },
              "privateIPAllocationMethod": "Dynamic",
              "loadBalancerBackendAddressPools": "[if(variables('cvuilb_enabled'), createArray(createObject('id', resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('cvulbName'), format('{0}-backend', variables('cvulbName'))))), createArray())]"
            }
          }
        ],
        "enableAcceleratedNetworking": true,
        "enableIPForwarding": true
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkInterfaces'), parameters('tagsByResource')['Microsoft.Network/networkInterfaces'], null())]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/loadBalancers', variables('cvulbName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monSubnet.name)]"
      ]
    },
    {
      "condition": "[greater(parameters('cvuCount'), 0)]",
      "copy": {
        "name": "cvuvm",
        "count": "[length(range(0, parameters('cvuCount')))]"
      },
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2021-03-01",
      "name": "[format('{0}-{1}', parameters('cvuVmName'), range(0, parameters('cvuCount'))[copyIndex()])]",
      "location": "[parameters('location')]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('cvuVMSize')]"
        },
        "storageProfile": {
          "imageReference": {
            "id": "[variables('cvuImageURI')]"
          },
          "osDisk": {
            "osType": "Linux",
            "createOption": "FromImage",
            "caching": "ReadWrite"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}-capture-nic', parameters('cvuVmName'), range(0, parameters('cvuCount'))[range(0, parameters('cvuCount'))[copyIndex()]]))]",
              "properties": {
                "primary": false
              }
            }
          ]
        },
        "osProfile": {
          "computerName": "[format('{0}-{1}', parameters('cvuVmName'), range(0, parameters('cvuCount'))[copyIndex()])]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), null(), variables('linuxConfiguration'))]",
          "customData": "IyEvYmluL2Jhc2gKCiMgY1Z1LVYtayBpbmxpbmUgbW9kZSBjb25maWcgZXhhbXBsZQoKIyBjdnV2X25hdF94eHggdmFsdWVzIGRlZmluZSBOQVQgcGFzc3Rocm91Z2hzIC0gdXAgdG8gNCBhbGxvd2VkCiMgICAoc3VmZml4IF8wLF8xLF8yLCBfMykKIyAgICBOT1RFIDogbG9jYWwgUkVTRVJWRUQgcG9ydHMgNDQzLDgwLDIyLDE2MSwxNjIKIyBjdnV2X25hdF9sb2NfaXAsIGN2dXZfbmF0X2RzdF9pcCA6IGVtcHRyeSBzdHJpbmdzICgnJykgd2lsbCBkaXNhYmxlIHRoYXQgbmF0IHBvcnQKCiMgZm9yIGN2dXZfdnhsYW5fc3JjaXAsIGN2dXZfdnhsYW5fcmVtb3RlaXAgOiBlbXB0eSBzdHJpbmdzICgnJykgd2lsbCBkaXNhYmxlCiMgdGhlIHZ4bGFuIG91dHB1dCBwb3J0LgoKIyBjVnUtVi1rIGlubGluZQpjYXQgPDxFT0ZfQk9PVENGRyA+L2hvbWUvY3BhY2tldC9ib290X2NvbmZpZy50eHQKewondm1fdHlwZScgICAgICAgICAgICAgICA6ICdhenVyZScsCidjYXB0dXJlX21vZGUnICAgICAgICAgIDogJ2N2dXYnLAonY3Z1dl9tb2RlJyAgICAgICAgICAgICA6ICdpbmxpbmUnLAonY3Z1dl9pbmxpbmVfbW9kZScgICAgICA6ICd0Y3RhcCcsCidjdnV2X21pcnJvcl9ldGhfMCcgICAgIDogJ2V0aDAnLAonY3Z1dl9tYXhfdnhsYW5fcG9ydHMnICA6IDMsCgonY3Z1dl92eGxhbl9kZXZfMCcgICAgICA6ICd2eGxhbjAnLAonY3Z1dl92eGxhbl9zcmNpcF8wJyAgICA6ICcnLAonY3Z1dl92eGxhbl9yZW1vdGVpcF8wJyA6ICcnLAonY3Z1dl92eGxhbl9pZF8wJyAgICAgICA6ICcyMTEwJywKJ2N2dXZfdnhsYW5fZXRoXzAnICAgICAgOiAnY3Z1dl9taXJyb3JfZXRoXzAnLAoKJ2N2dXZfdnhsYW5fZGV2XzEnICAgICAgOiAndnhsYW4xJywKJ2N2dXZfdnhsYW5fc3JjaXBfMScgICAgOiAnJywKJ2N2dXZfdnhsYW5fcmVtb3RlaXBfMScgOiAnJywKJ2N2dXZfdnhsYW5faWRfMScgICAgICAgOiAnMjIxMScsCidjdnV2X3Z4bGFuX2V0aF8xJyAgICAgIDogJ2N2dXZfbWlycm9yX2V0aF8wJywKCidjdnV2X3Z4bGFuX2Rldl8yJyAgICAgIDogJ3Z4bGFuMicsCidjdnV2X3Z4bGFuX3NyY2lwXzInICAgIDogJycsCidjdnV2X3Z4bGFuX3JlbW90ZWlwXzInIDogJycsCidjdnV2X3Z4bGFuX2lkXzInICAgICAgIDogJzIyMTInLAonY3Z1dl92eGxhbl9ldGhfMicgICAgICA6ICdjdnV2X21pcnJvcl9ldGhfMCcsCgonY3Z1dl9uYXRfbG9jX3Byb3RvXzAnICA6ICd0Y3AnLAonY3Z1dl9uYXRfbG9jX2lwXzAnICAgICA6ICcnLAonY3Z1dl9uYXRfbG9jX3BvcnRfMCcgICA6ICcnLAonY3Z1dl9uYXRfZHN0X2lwXzAnICAgICA6ICcnLAonY3Z1dl9uYXRfZHN0X3BvcnRfMCcgICA6ICcnLAoKJ2J1cm5zaWRlX21vZGUnICAgICAgICAgOiBGYWxzZSwKJ2NzdG9yX2xpdGVfbW9kZScgICAgICAgOiBGYWxzZSwKJ3NzaCcgICAgICAgICAgICAgICAgICAgOiB7J2VuYWJsZWQnOiBUcnVlfSwKJ2NhcHR1cmVfbmljX2V0aCcgCSAgICA6ICdldGgwJywKJ21hbmFnZW1lbnRfbmljX2V0aCcJOiAnZXRoMCcsCn0KRU9GX0JPT1RDRkcKCiMgbWFrZSB3cml0YWJsZSBzbyB0aGF0IG5leHQgYm9vdCBjYW4gb3ZlcndyaXRlIGlmIG5lZWQgYmUKY2htb2QgdWcrdyAvaG9tZS9jcGFja2V0L2Jvb3RfY29uZmlnLnR4dAoKZWNobyAiY2xvdWQtaW5pdCByYW4gdXNlci1kYXRhIGF0OiAiICQoZGF0ZSkgPj4vaG9tZS9jcGFja2V0L3ByZWJvb3Rtc2cudHh0"
        }
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Compute/virtualMachines'), parameters('tagsByResource')['Microsoft.Compute/virtualMachines'], null())]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}-capture-nic', parameters('cvuVmName'), range(0, parameters('cvuCount'))[range(0, parameters('cvuCount'))[copyIndex()]]))]"
      ]
    },
    {
      "condition": "[variables('cvuilb_enabled')]",
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "2021-03-01",
      "name": "[variables('cvulbName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard",
        "tier": "Regional"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[format('{0}-frontend', variables('cvulbName'))]",
            "properties": {
              "subnet": {
                "id": "[variables('monsubnetId')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[format('{0}-backend', variables('cvulbName'))]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "[format('{0}-to_server', variables('cvulbName'))]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('cvulbName'), format('{0}-frontend', variables('cvulbName')))]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('cvulbName'), format('{0}-backend', variables('cvulbName')))]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('cvulbName'), format('{0}-probe', variables('cvulbName')))]"
              },
              "frontendPort": 0,
              "backendPort": 0,
              "protocol": "All"
            }
          }
        ],
        "probes": [
          {
            "name": "[format('{0}-probe', variables('cvulbName'))]",
            "properties": {
              "protocol": "Tcp",
              "port": 22,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            }
          }
        ]
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/loadBalancers'), parameters('tagsByResource')['Microsoft.Network/loadBalancers'], null())]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monSubnet.name)]"
      ]
    },
    {
      "condition": "[variables('cstorilb_enabled')]",
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "2021-03-01",
      "name": "[variables('cstorlbName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard",
        "tier": "Regional"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[format('{0}-frontend', variables('cstorlbName'))]",
            "properties": {
              "subnet": {
                "id": "[variables('monsubnetId')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[format('{0}-backend', variables('cstorlbName'))]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "[format('{0}-to_server', variables('cstorlbName'))]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('cstorlbName'), format('{0}-frontend', variables('cstorlbName')))]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('cstorlbName'), format('{0}-backend', variables('cstorlbName')))]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('cstorlbName'), format('{0}-probe', variables('cstorlbName')))]"
              },
              "frontendPort": 0,
              "backendPort": 0,
              "protocol": "All"
            }
          }
        ],
        "probes": [
          {
            "name": "[format('{0}-probe', variables('cstorlbName'))]",
            "properties": {
              "protocol": "Tcp",
              "port": 22,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            }
          }
        ]
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/loadBalancers'), parameters('tagsByResource')['Microsoft.Network/loadBalancers'], null())]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monSubnet.name)]"
      ]
    }
  ],
  "outputs": {
    "provisioning_instuctions": {
      "type": "string",
      "value": "1) ssh from a machine that has access to the monitoring subnet\n2) run the cclear_provisioning_script at the prompt"
    },
    "cclear_ssh": {
      "type": "string",
      "value": "[format('ssh {0}@{1}', parameters('adminUsername'), reference(resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}-nic', parameters('cClearVmName'), range(0, parameters('cClearCount'))[0]))).ipConfigurations[0].properties.privateIPAddress)]"
    },
    "cclear_provisioning_script": {
      "type": "string",
      "value": "until [ -x /opt/cloud/deployer.py ]; do echo \"still deploying, please wait...\"; sleep 5; done; /opt/cloud/deployer.py"
    },
    "cclear_ip": {
      "type": "string",
      "value": "[format('{0}', reference(resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}-nic', parameters('cClearVmName'), range(0, parameters('cClearCount'))[0]))).ipConfigurations[0].properties.privateIPAddress)]"
    },
    "cvu_ilb_frontend_ip": {
      "type": "string",
      "value": "[if(variables('cvuilb_enabled'), reference(resourceId('Microsoft.Network/loadBalancers', variables('cvulbName'))).frontendIPConfigurations[0].properties.privateIPAddress, '')]"
    },
    "cvu_provisioning": {
      "type": "array",
      "copy": {
        "count": "[length(range(0, parameters('cvuCount')))]",
        "input": {
          "index": "[range(0, parameters('cvuCount'))[copyIndex()]]",
          "name": "[format('{0}', format('{0}-{1}', parameters('cvuVmName'), range(0, parameters('cvuCount'))[range(0, parameters('cvuCount'))[copyIndex()]]))]",
          "nic_name": "[format('{0}', format('{0}-{1}-capture-nic', parameters('cvuVmName'), range(0, parameters('cvuCount'))[range(0, parameters('cvuCount'))[copyIndex()]]))]",
          "private_ip": "[format('{0}', reference(resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}-capture-nic', parameters('cvuVmName'), range(0, parameters('cvuCount'))[range(0, parameters('cvuCount'))[copyIndex()]]))).ipConfigurations[0].properties.privateIPAddress)]"
        }
      }
    },
    "cstor_ilb_frontend_ip": {
      "type": "string",
      "value": "[if(variables('cstorilb_enabled'), reference(resourceId('Microsoft.Network/loadBalancers', variables('cstorlbName'))).frontendIPConfigurations[0].properties.privateIPAddress, '')]"
    },
    "cstor_provisioning": {
      "type": "array",
      "copy": {
        "count": "[length(range(0, parameters('cstorCount')))]",
        "input": {
          "index": "[range(0, parameters('cstorCount'))[copyIndex()]]",
          "name": "[format('{0}', format('{0}-{1}', parameters('cvuVmName'), range(0, parameters('cvuCount'))[range(0, parameters('cstorCount'))[copyIndex()]]))]",
          "nic_name": "[format('{0}', format('{0}-{1}-capture-nic', parameters('cstorVmName'), range(0, parameters('cstorCount'))[range(0, parameters('cstorCount'))[copyIndex()]]))]",
          "private_ip": "[format('{0}', reference(resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}-capture-nic', parameters('cstorVmName'), range(0, parameters('cstorCount'))[range(0, parameters('cstorCount'))[copyIndex()]]))).ipConfigurations[0].properties.privateIPAddress)]"
        }
      }
    }
  }
}