{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1008.15138",
      "templateHash": "4894380004769573308"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "metadata": {
        "description": "Location for the resources."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "User name for the Virtual Machine."
      }
    },
    "authenticationType": {
      "type": "string",
      "metadata": {
        "description": "Type of authentication to use on the Virtual Machine."
      },
      "allowedValues": [
        "password",
        "sshPublicKey"
      ]
    },
    "adminPasswordOrKey": {
      "type": "secureString",
      "metadata": {
        "description": "Password or ssh key for the Virtual Machine."
      }
    },
    "virtualNetwork": {
      "type": "object",
      "metadata": {
        "description": "virtualNetwork properties from VirtualNetworkCombo"
      }
    },
    "VMSizeSettings": {
      "type": "object",
      "defaultValue": {
        "cclear": "Standard_D4s_v3",
        "cvu": "Standard_D4s_v3",
        "cstor": "Standard_D4s_v3"
      },
      "metadata": {
        "description": "defualt values for cclear VM"
      }
    },
    "cClearVmName": {
      "type": "string",
      "metadata": {
        "description": "cClear VM Name"
      }
    },
    "cClearImage": {
      "type": "object",
      "metadata": {
        "description": "cClear Image URI"
      }
    },
    "cClearVersion": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "cClear Image Version"
      }
    },
    "cvuCount": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Number of cVus"
      }
    },
    "cvuVmName": {
      "type": "string",
      "metadata": {
        "description": "cVu Base VM Name"
      }
    },
    "cvuImage": {
      "type": "object",
      "metadata": {
        "description": "cvu Image URI"
      }
    },
    "cvuVersion": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "cvu Image Version"
      }
    },
    "cstorCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Number of cStors"
      }
    },
    "cstorVmName": {
      "type": "string",
      "metadata": {
        "description": "cStor VM Name"
      }
    },
    "cstorImage": {
      "type": "object",
      "metadata": {
        "description": "cstor Image URI"
      }
    },
    "cstorVersion": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "cstor Image Version"
      }
    },
    "tagsByResource": {
      "type": "object",
      "metadata": {
        "description": "tags from TagsByResource"
      }
    }
  },
  "functions": [],
  "variables": {
    "cvulbName": "[format('{0}_iLB', parameters('cvuVmName'))]",
    "cstorlbName": "[format('{0}_iLB', parameters('cstorVmName'))]",
    "linuxConfiguration": {
      "disablePasswordAuthentication": true,
      "ssh": {
        "publicKeys": [
          {
            "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername'))]",
            "keyData": "[parameters('adminPasswordOrKey')]"
          }
        ]
      }
    },
    "cstorilbPropertiesBackendpoolEnabled": {
      "subnet": {
        "id": "[variables('cstorsubnetId')]"
      },
      "privateIPAllocationMethod": "Dynamic",
      "loadBalancerBackendAddressPools": [
        {
          "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('cstorlbName'), format('{0}-backend', variables('cstorlbName')))]"
        }
      ]
    },
    "cstorilbPropertiesBackendpoolDisabled": {
      "subnet": {
        "id": "[variables('cstorsubnetId')]"
      },
      "privateIPAllocationMethod": "Dynamic"
    },
    "cvuilbPropertiesBackendpoolEnabled": {
      "subnet": {
        "id": "[variables('monsubnetId')]"
      },
      "privateIPAllocationMethod": "Dynamic",
      "loadBalancerBackendAddressPools": [
        {
          "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('cstorlbName'), format('{0}-backend', variables('cstorlbName')))]"
        }
      ]
    },
    "cvuilbPropertiesBackendpoolDisabled": {
      "subnet": {
        "id": "[variables('monsubnetId')]"
      },
      "privateIPAllocationMethod": "Dynamic"
    },
    "mgmtsubnetId": "[if(equals(parameters('virtualNetwork').newOrExisting, 'new'), resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.mgmtSubnet.name), resourceId(parameters('virtualNetwork').resourceGroup, 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.mgmtSubnet.name))]",
    "monsubnetId": "[if(equals(parameters('virtualNetwork').newOrExisting, 'new'), resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monSubnet.name), resourceId(parameters('virtualNetwork').resourceGroup, 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monSubnet.name))]",
    "cstorsubnetId": "[if(equals(parameters('virtualNetwork').newOrExisting, 'new'), resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.cstorSubnet.name), resourceId(parameters('virtualNetwork').resourceGroup, 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.cstorSubnet.name))]",
    "cclearImageURI": "[if(empty(parameters('cClearVersion')), parameters('cClearImage').id, format('{0}/versions/{1}', parameters('cClearImage').id, parameters('cClearVersion')))]",
    "cstorImageURI": "[if(empty(parameters('cstorVersion')), parameters('cstorImage').id, format('{0}/versions/{1}', parameters('cstorImage').id, parameters('cstorVersion')))]",
    "cvuImageURI": "[if(empty(parameters('cvuVersion')), parameters('cvuImage').id, format('{0}/versions/{1}', parameters('cvuImage').id, parameters('cvuVersion')))]"
  },
  "resources": [
    {
      "condition": "[equals(parameters('virtualNetwork').newOrExisting, 'new')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-11-01",
      "name": "[parameters('virtualNetwork').name]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": "[parameters('virtualNetwork').addressPrefixes]"
        }
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/virtualNetworks'), parameters('tagsByResource')['Microsoft.Network/virtualNetworks'], null())]"
    },
    {
      "condition": "[equals(parameters('virtualNetwork').newOrExisting, 'new')]",
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2020-11-01",
      "name": "[format('{0}/{1}', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.mgmtSubnet.name)]",
      "properties": {
        "addressPrefix": "[parameters('virtualNetwork').subnets.mgmtSubnet.addressPrefix]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetwork').name)]"
      ]
    },
    {
      "condition": "[equals(parameters('virtualNetwork').newOrExisting, 'new')]",
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2020-11-01",
      "name": "[format('{0}/{1}', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monSubnet.name)]",
      "properties": {
        "addressPrefix": "[parameters('virtualNetwork').subnets.monSubnet.addressPrefix]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetwork').name)]"
      ]
    },
    {
      "condition": "[equals(parameters('virtualNetwork').newOrExisting, 'new')]",
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2020-11-01",
      "name": "[format('{0}/{1}', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.cstorSubnet.name)]",
      "properties": {
        "addressPrefix": "[parameters('virtualNetwork').subnets.cstorSubnet.addressPrefix]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetwork').name)]"
      ]
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-11-01",
      "name": "[format('{0}-nic', parameters('cClearVmName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[format('{0}-ipconfig-nic', parameters('cClearVmName'))]",
            "properties": {
              "subnet": {
                "id": "[variables('mgmtsubnetId')]"
              },
              "privateIPAllocationMethod": "Dynamic"
            }
          }
        ]
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkInterfaces'), parameters('tagsByResource')['Microsoft.Network/networkInterfaces'], null())]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.mgmtSubnet.name)]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2021-03-01",
      "name": "[parameters('cClearVmName')]",
      "location": "[parameters('location')]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('VMSizeSettings').cclear]"
        },
        "storageProfile": {
          "imageReference": {
            "id": "[variables('cclearImageURI')]"
          },
          "osDisk": {
            "osType": "Linux",
            "createOption": "FromImage",
            "caching": "ReadWrite"
          },
          "dataDisks": [
            {
              "name": "[format('{0}-DataDisk1', parameters('cClearVmName'))]",
              "lun": 1,
              "createOption": "Empty",
              "diskSizeGB": 500,
              "caching": "ReadWrite"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', parameters('cClearVmName')))]"
            }
          ]
        },
        "osProfile": {
          "computerName": "[parameters('cClearVmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), null(), variables('linuxConfiguration'))]"
        }
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Compute/virtualMachines'), parameters('tagsByResource')['Microsoft.Compute/virtualMachines'], null())]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', parameters('cClearVmName')))]"
      ]
    },
    {
      "copy": {
        "name": "cstorcapturenic",
        "count": "[length(range(0, parameters('cstorCount')))]"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-11-01",
      "name": "[format('{0}-{1}-capture-nic', parameters('cstorVmName'), range(0, parameters('cstorCount'))[copyIndex()])]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[format('{0}-{1}-capture-ipconfig-nic', parameters('cstorVmName'), range(0, parameters('cstorCount'))[copyIndex()])]",
            "properties": "[if(greater(parameters('cstorCount'), 1), variables('cstorilbPropertiesBackendpoolEnabled'), variables('cstorilbPropertiesBackendpoolDisabled'))]"
          }
        ],
        "enableAcceleratedNetworking": true,
        "enableIPForwarding": true
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkInterfaces'), parameters('tagsByResource')['Microsoft.Network/networkInterfaces'], null())]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.cstorSubnet.name)]"
      ]
    },
    {
      "copy": {
        "name": "cstormgmtnic",
        "count": "[length(range(0, parameters('cstorCount')))]"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-11-01",
      "name": "[format('{0}-{1}-mgmt-nic', parameters('cstorVmName'), range(0, parameters('cstorCount'))[copyIndex()])]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[format('{0}-{1}-mgmt-ipconfig-nic', parameters('cstorVmName'), range(0, parameters('cstorCount'))[copyIndex()])]",
            "properties": {
              "subnet": {
                "id": "[variables('mgmtsubnetId')]"
              },
              "privateIPAllocationMethod": "Dynamic"
            }
          }
        ]
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkInterfaces'), parameters('tagsByResource')['Microsoft.Network/networkInterfaces'], null())]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.mgmtSubnet.name)]"
      ]
    },
    {
      "copy": {
        "name": "cstorvm",
        "count": "[length(range(0, parameters('cstorCount')))]"
      },
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2021-03-01",
      "name": "[format('{0}-{1}', parameters('cstorVmName'), range(0, parameters('cstorCount'))[copyIndex()])]",
      "location": "[parameters('location')]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('VMSizeSettings').cstor]"
        },
        "storageProfile": {
          "imageReference": {
            "id": "[variables('cstorImageURI')]"
          },
          "osDisk": {
            "osType": "Linux",
            "createOption": "FromImage",
            "caching": "ReadWrite"
          },
          "dataDisks": [
            {
              "name": "[format('{0}-{1}-DataDisk0', parameters('cstorVmName'), range(0, parameters('cstorCount'))[copyIndex()])]",
              "lun": 0,
              "createOption": "Empty",
              "diskSizeGB": 500,
              "caching": "ReadWrite"
            },
            {
              "name": "[format('{0}-{1}-DataDisk1', parameters('cstorVmName'), range(0, parameters('cstorCount'))[copyIndex()])]",
              "lun": 1,
              "createOption": "Empty",
              "diskSizeGB": 500,
              "caching": "ReadWrite"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}-capture-nic', parameters('cstorVmName'), range(0, parameters('cstorCount'))[range(0, parameters('cstorCount'))[copyIndex()]]))]",
              "properties": {
                "primary": true
              }
            },
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}-mgmt-nic', parameters('cstorVmName'), range(0, parameters('cstorCount'))[range(0, parameters('cstorCount'))[copyIndex()]]))]",
              "properties": {
                "primary": false
              }
            }
          ]
        },
        "osProfile": {
          "computerName": "[parameters('cstorVmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), null(), variables('linuxConfiguration'))]",
          "customData": "IyEvYmluL2Jhc2gKCiMgY1Z1LVYtayBpbmxpbmUgYm9vdCBjb25maWcgc2V0dGluZ3MKY2F0IDw8RU9GX0JPT1RDRkcgPi9ob21lL2NwYWNrZXQvYm9vdF9jb25maWcudHh0CnsKJ2NhcHR1cmVfbW9kZSc6ICdsaWJwY2FwJywKJ2RlY2FwX21vZGUnOiAndnhsYW4nLAonbnVtX3BjYXBfYnVmcyc6IDIsCidjYXB0dXJlX25pY19pbmRleCc6IDAsCidwY2lfd2hpdGVsaXN0JzogJzAwMDE6MDA6MDIuMCcsCidldGhfZGV2JzogJ2V0aDAnLAonY29yZV9tYXNrJzogJzB4MycsCididXJuc2lkZV9tb2RlJzogRmFsc2UsCidjc3Rvcl9saXRlX21vZGUnOiBGYWxzZSwKJ3NzaCc6IHsnZW5hYmxlZCc6IFRydWV9LAonY2xlYW51cF90aHJlc2hvbGQnOiA1MCwKJ3VzZV9jb21wcmVzc2lvbic6IEZhbHNlLAondGllcmVkX3N0b3JfZW4nOiBGYWxzZSwKJ2NhcHR1cmVfbmljX2V0aCc6ICdldGgwJywKJ21hbmFnZW1lbnRfbmljX2V0aCc6ICdldGgxJywKfQpFT0ZfQk9PVENGRwoKY2htb2QgdWcrdyAvaG9tZS9jcGFja2V0L2Jvb3RfY29uZmlnLnR4dAoKZWNobyAiY2xvdWQtaW5pdCByYW4gdXNlci1kYXRhIGF0OiAiICQoZGF0ZSkgPj4vaG9tZS9jcGFja2V0L3ByZWJvb3Rtc2cudHh0"
        }
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Compute/virtualMachines'), parameters('tagsByResource')['Microsoft.Compute/virtualMachines'], null())]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}-capture-nic', parameters('cstorVmName'), range(0, parameters('cstorCount'))[range(0, parameters('cstorCount'))[copyIndex()]]))]",
        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}-mgmt-nic', parameters('cstorVmName'), range(0, parameters('cstorCount'))[range(0, parameters('cstorCount'))[copyIndex()]]))]"
      ]
    },
    {
      "copy": {
        "name": "cvucapturenic",
        "count": "[length(range(0, parameters('cvuCount')))]"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-11-01",
      "name": "[format('{0}-{1}-capture-nic', parameters('cvuVmName'), range(0, parameters('cvuCount'))[copyIndex()])]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[format('{0}-{1}-capture-ipconfig-nic', parameters('cvuVmName'), range(0, parameters('cvuCount'))[copyIndex()])]",
            "properties": "[if(greater(parameters('cvuCount'), 1), variables('cvuilbPropertiesBackendpoolEnabled'), variables('cvuilbPropertiesBackendpoolDisabled'))]"
          }
        ],
        "enableAcceleratedNetworking": true,
        "enableIPForwarding": true
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkInterfaces'), parameters('tagsByResource')['Microsoft.Network/networkInterfaces'], null())]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/loadBalancers', variables('cvulbName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monSubnet.name)]"
      ]
    },
    {
      "copy": {
        "name": "cvumgmtnic",
        "count": "[length(range(0, parameters('cvuCount')))]"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-11-01",
      "name": "[format('{0}-{1}-mgmt-nic', parameters('cvuVmName'), range(0, parameters('cvuCount'))[copyIndex()])]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[format('{0}-{1}-mgmt-ipconfig-nic', parameters('cvuVmName'), range(0, parameters('cvuCount'))[copyIndex()])]",
            "properties": {
              "subnet": {
                "id": "[variables('mgmtsubnetId')]"
              },
              "privateIPAllocationMethod": "Dynamic"
            }
          }
        ]
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkInterfaces'), parameters('tagsByResource')['Microsoft.Network/networkInterfaces'], null())]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.mgmtSubnet.name)]"
      ]
    },
    {
      "copy": {
        "name": "cvuvm",
        "count": "[length(range(0, parameters('cvuCount')))]"
      },
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2021-03-01",
      "name": "[format('{0}-{1}', parameters('cvuVmName'), range(0, parameters('cvuCount'))[copyIndex()])]",
      "location": "[parameters('location')]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('VMSizeSettings').cvu]"
        },
        "storageProfile": {
          "imageReference": {
            "id": "[variables('cvuImageURI')]"
          },
          "osDisk": {
            "osType": "Linux",
            "createOption": "FromImage",
            "caching": "ReadWrite"
          },
          "dataDisks": [
            {
              "name": "[format('{0}-{1}-DataDisk0', parameters('cvuVmName'), range(0, parameters('cvuCount'))[copyIndex()])]",
              "lun": 0,
              "createOption": "Empty",
              "diskSizeGB": 500,
              "caching": "ReadWrite"
            },
            {
              "name": "[format('{0}-{1}-DataDisk1', parameters('cvuVmName'), range(0, parameters('cvuCount'))[copyIndex()])]",
              "lun": 1,
              "createOption": "Empty",
              "diskSizeGB": 500,
              "caching": "ReadWrite"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}-capture-nic', parameters('cvuVmName'), range(0, parameters('cvuCount'))[range(0, parameters('cvuCount'))[copyIndex()]]))]",
              "properties": {
                "primary": true
              }
            },
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}-mgmt-nic', parameters('cvuVmName'), range(0, parameters('cvuCount'))[range(0, parameters('cvuCount'))[copyIndex()]]))]",
              "properties": {
                "primary": false
              }
            }
          ]
        },
        "osProfile": {
          "computerName": "[format('{0}-{1}', parameters('cvuVmName'), parameters('cvuCount'))]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), null(), variables('linuxConfiguration'))]",
          "customData": "IyEvYmluL2Jhc2gKCiMgY1Z1LVYtayBpbmxpbmUgbW9kZSBjb25maWcgZXhhbXBsZQoKIyBjdnV2X25hdF94eHggdmFsdWVzIGRlZmluZSBOQVQgcGFzc3Rocm91Z2hzIC0gdXAgdG8gNCBhbGxvd2VkCiMgICAoc3VmZml4IF8wLF8xLF8yLCBfMykKIyAgICBOT1RFIDogbG9jYWwgUkVTRVJWRUQgcG9ydHMgNDQzLDgwLDIyLDE2MSwxNjIKIyBjdnV2X25hdF9sb2NfaXAsIGN2dXZfbmF0X2RzdF9pcCA6IGVtcHRyeSBzdHJpbmdzICgnJykgd2lsbCBkaXNhYmxlIHRoYXQgbmF0IHBvcnQKCiMgZm9yIGN2dXZfdnhsYW5fc3JjaXAsIGN2dXZfdnhsYW5fcmVtb3RlaXAgOiBlbXB0eSBzdHJpbmdzICgnJykgd2lsbCBkaXNhYmxlCiMgdGhlIHZ4bGFuIG91dHB1dCBwb3J0LgoKIyBjVnUtVi1rIGlubGluZQpjYXQgPDxFT0ZfQk9PVENGRyA+L2hvbWUvY3BhY2tldC9ib290X2NvbmZpZy50eHQKewonY2FwdHVyZV9tb2RlJyAgICAgICAgICA6ICdjdnV2JywKJ2N2dXZfbW9kZScgICAgICAgICAgICAgOiAnaW5saW5lJywKJ2N2dXZfaW5saW5lX21vZGUnICAgICAgOiAndGN0YXAnLAonY3Z1dl9taXJyb3JfZXRoXzAnICAgICA6ICdldGgwJywKJ2N2dXZfbWF4X3Z4bGFuX3BvcnRzJyAgOiAzLAoKJ2N2dXZfdnhsYW5fZGV2XzAnICAgICAgOiAndnhsYW4wJywKJ2N2dXZfdnhsYW5fc3JjaXBfMCcgICAgOiAnJywKJ2N2dXZfdnhsYW5fcmVtb3RlaXBfMCcgOiAnJywKJ2N2dXZfdnhsYW5faWRfMCcgICAgICAgOiAnMjExMCcsCidjdnV2X3Z4bGFuX2V0aF8wJyAgICAgIDogJ2N2dXZfbWlycm9yX2V0aF8wJywKCidjdnV2X3Z4bGFuX2Rldl8xJyAgICAgIDogJ3Z4bGFuMScsCidjdnV2X3Z4bGFuX3NyY2lwXzEnICAgIDogJycsCidjdnV2X3Z4bGFuX3JlbW90ZWlwXzEnIDogJycsCidjdnV2X3Z4bGFuX2lkXzEnICAgICAgIDogJzIyMTEnLAonY3Z1dl92eGxhbl9ldGhfMScgICAgICA6ICdjdnV2X21pcnJvcl9ldGhfMCcsCgonY3Z1dl92eGxhbl9kZXZfMicgICAgICA6ICd2eGxhbjInLAonY3Z1dl92eGxhbl9zcmNpcF8yJyAgICA6ICcnLAonY3Z1dl92eGxhbl9yZW1vdGVpcF8yJyA6ICcnLAonY3Z1dl92eGxhbl9pZF8yJyAgICAgICA6ICcyMjEyJywKJ2N2dXZfdnhsYW5fZXRoXzInICAgICAgOiAnY3Z1dl9taXJyb3JfZXRoXzAnLAoKJ2N2dXZfbmF0X2xvY19wcm90b18wJyAgOiAndGNwJywKJ2N2dXZfbmF0X2xvY19pcF8wJyAgICAgOiAnJywKJ2N2dXZfbmF0X2xvY19wb3J0XzAnICAgOiAnJywKJ2N2dXZfbmF0X2RzdF9pcF8wJyAgICAgOiAnJywKJ2N2dXZfbmF0X2RzdF9wb3J0XzAnICAgOiAnJywKCididXJuc2lkZV9tb2RlJyAgICAgICAgIDogRmFsc2UsCidjc3Rvcl9saXRlX21vZGUnICAgICAgIDogRmFsc2UsCidzc2gnICAgICAgICAgICAgICAgICAgIDogeydlbmFibGVkJzogVHJ1ZX0sCidjYXB0dXJlX25pY19ldGgnIAkgICAgOiAnZXRoMCcsCidtYW5hZ2VtZW50X25pY19ldGgnCTogJ2V0aDEnLAp9CkVPRl9CT09UQ0ZHCgojIG1ha2Ugd3JpdGFibGUgc28gdGhhdCBuZXh0IGJvb3QgY2FuIG92ZXJ3cml0ZSBpZiBuZWVkIGJlCmNobW9kIHVnK3cgL2hvbWUvY3BhY2tldC9ib290X2NvbmZpZy50eHQKCmVjaG8gImNsb3VkLWluaXQgcmFuIHVzZXItZGF0YSBhdDogIiAkKGRhdGUpID4+L2hvbWUvY3BhY2tldC9wcmVib290bXNnLnR4dA=="
        }
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Compute/virtualMachines'), parameters('tagsByResource')['Microsoft.Compute/virtualMachines'], null())]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}-capture-nic', parameters('cvuVmName'), range(0, parameters('cvuCount'))[range(0, parameters('cvuCount'))[copyIndex()]]))]",
        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}-mgmt-nic', parameters('cvuVmName'), range(0, parameters('cvuCount'))[range(0, parameters('cvuCount'))[copyIndex()]]))]"
      ]
    },
    {
      "condition": "[greater(parameters('cvuCount'), 1)]",
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "2021-03-01",
      "name": "[variables('cvulbName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard",
        "tier": "Regional"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[format('{0}-frontend', variables('cvulbName'))]",
            "properties": {
              "subnet": {
                "id": "[variables('monsubnetId')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[format('{0}-backend', variables('cvulbName'))]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "[format('{0}-to_server', variables('cvulbName'))]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('cvulbName'), format('{0}-frontend', variables('cvulbName')))]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('cvulbName'), format('{0}-backend', variables('cvulbName')))]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('cvulbName'), format('{0}-probe', variables('cvulbName')))]"
              },
              "frontendPort": 0,
              "backendPort": 0,
              "protocol": "All"
            }
          }
        ],
        "probes": [
          {
            "name": "[format('{0}-probe', variables('cvulbName'))]",
            "properties": {
              "protocol": "Tcp",
              "port": 22,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            }
          }
        ]
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/loadBalancers'), parameters('tagsByResource')['Microsoft.Network/loadBalancers'], null())]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monSubnet.name)]"
      ]
    },
    {
      "condition": "[greater(parameters('cstorCount'), 1)]",
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "2021-03-01",
      "name": "[variables('cstorlbName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard",
        "tier": "Regional"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[format('{0}-frontend', variables('cstorlbName'))]",
            "properties": {
              "subnet": {
                "id": "[variables('cstorsubnetId')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[format('{0}-backend', variables('cstorlbName'))]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "[format('{0}-to_server', variables('cstorlbName'))]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('cstorlbName'), format('{0}-frontend', variables('cstorlbName')))]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('cstorlbName'), format('{0}-backend', variables('cstorlbName')))]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('cstorlbName'), format('{0}-probe', variables('cstorlbName')))]"
              },
              "frontendPort": 0,
              "backendPort": 0,
              "protocol": "All"
            }
          }
        ],
        "probes": [
          {
            "name": "[format('{0}-probe', variables('cstorlbName'))]",
            "properties": {
              "protocol": "Tcp",
              "port": 22,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            }
          }
        ]
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/loadBalancers'), parameters('tagsByResource')['Microsoft.Network/loadBalancers'], null())]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.cstorSubnet.name)]"
      ]
    }
  ]
}