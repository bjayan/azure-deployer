{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1008.15138",
      "templateHash": "14003570559481730104"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "metadata": {
        "description": "Location for the resources."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "User name for the Virtual Machine."
      }
    },
    "authenticationType": {
      "type": "string",
      "metadata": {
        "description": "Type of authentication to use on the Virtual Machine."
      },
      "allowedValues": [
        "password",
        "sshPublicKey"
      ]
    },
    "adminPasswordOrKey": {
      "type": "secureString",
      "metadata": {
        "description": "Password or ssh key for the Virtual Machine."
      }
    },
    "virtualNetwork": {
      "type": "object",
      "metadata": {
        "description": "virtualNetwork properties from VirtualNetworkCombo"
      }
    },
    "cClearVmName": {
      "type": "string",
      "metadata": {
        "description": "cClear VM Name"
      }
    },
    "VMSizeSettings": {
      "type": "object",
      "defaultValue": {
        "cclear": "Standard_D4s_v3",
        "cvu": "Standard_D4s_v3",
        "cstor": "Standard_D4s_v3"
      },
      "metadata": {
        "description": "defualt values for cclear VM"
      }
    },
    "cclearPublicIpAddress01": {
      "type": "object",
      "metadata": {
        "description": "public IP properties from PublicIpAddressCombo"
      }
    },
    "cClearImage": {
      "type": "object",
      "metadata": {
        "description": "cClear Image URI"
      }
    },
    "cClearVersion": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "cClear Image Version"
      }
    },
    "cvuVmName": {
      "type": "string",
      "metadata": {
        "description": "cVu Base VM Name"
      }
    },
    "cvuPublicIpAddress01": {
      "type": "object",
      "metadata": {
        "description": "public IP properties from PublicIpAddressCombo"
      }
    },
    "cvuPublicIpAddress02": {
      "type": "object",
      "metadata": {
        "description": "public IP properties from PublicIpAddressCombo"
      }
    },
    "cvuPublicIpAddress03": {
      "type": "object",
      "metadata": {
        "description": "public IP properties from PublicIpAddressCombo"
      }
    },
    "cvuImage": {
      "type": "object",
      "metadata": {
        "description": "cvu Image URI"
      }
    },
    "cvuVersion": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "cvu Image Version"
      }
    },
    "cstorVmName": {
      "type": "string",
      "metadata": {
        "description": "cStor VM Name"
      }
    },
    "cstorPublicIpAddress01": {
      "type": "object",
      "metadata": {
        "description": "public IP properties from PublicIpAddressCombo"
      }
    },
    "cstorImage": {
      "type": "object",
      "metadata": {
        "description": "cstor Image URI"
      }
    },
    "cstorVersion": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "cstor Image Version"
      }
    },
    "tagsByResource": {
      "type": "object",
      "metadata": {
        "description": "tags from TagsByResource"
      }
    }
  },
  "functions": [],
  "variables": {
    "linuxConfiguration": {
      "disablePasswordAuthentication": true,
      "ssh": {
        "publicKeys": [
          {
            "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername'))]",
            "keyData": "[parameters('adminPasswordOrKey')]"
          }
        ]
      }
    },
    "mgmtsubnetId": "[if(equals(parameters('virtualNetwork').newOrExisting, 'new'), resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.mgmtSubnet.name), resourceId(parameters('virtualNetwork').resourceGroup, 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.mgmtSubnet.name))]",
    "monsubnetId": "[if(equals(parameters('virtualNetwork').newOrExisting, 'new'), resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monSubnet.name), resourceId(parameters('virtualNetwork').resourceGroup, 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monSubnet.name))]",
    "cstorsubnetId": "[if(equals(parameters('virtualNetwork').newOrExisting, 'new'), resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.cstorSubnet.name), resourceId(parameters('virtualNetwork').resourceGroup, 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.cstorSubnet.name))]",
    "cclearpublicIPId": "[if(equals(parameters('cclearPublicIpAddress01').newOrExistingOrNone, 'new'), resourceId('Microsoft.Network/publicIPAddresses', parameters('cclearPublicIpAddress01').name), resourceId(parameters('cclearPublicIpAddress01').resourceGroup, 'Microsoft.Network/publicIPAddresses', parameters('cclearPublicIpAddress01').name))]",
    "cclearImageURI": "[if(empty(parameters('cClearVersion')), parameters('cClearImage').id, format('{0}/versions/{1}', parameters('cClearImage').id, parameters('cClearVersion')))]"
  },
  "resources": [
    {
      "condition": "[equals(parameters('virtualNetwork').newOrExisting, 'new')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-11-01",
      "name": "[parameters('virtualNetwork').name]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": "[parameters('virtualNetwork').addressPrefixes]"
        }
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/virtualNetworks'), parameters('tagsByResource')['Microsoft.Network/virtualNetworks'], null())]"
    },
    {
      "condition": "[equals(parameters('virtualNetwork').newOrExisting, 'new')]",
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2020-11-01",
      "name": "[format('{0}/{1}', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.mgmtSubnet.name)]",
      "properties": {
        "addressPrefix": "[parameters('virtualNetwork').subnets.mgmtSubnet.addressPrefix]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetwork').name)]"
      ]
    },
    {
      "condition": "[equals(parameters('virtualNetwork').newOrExisting, 'new')]",
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2020-11-01",
      "name": "[format('{0}/{1}', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monSubnet.name)]",
      "properties": {
        "addressPrefix": "[parameters('virtualNetwork').subnets.monSubnet.addressPrefix]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetwork').name)]"
      ]
    },
    {
      "condition": "[equals(parameters('virtualNetwork').newOrExisting, 'new')]",
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2020-11-01",
      "name": "[format('{0}/{1}', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.cstorSubnet.name)]",
      "properties": {
        "addressPrefix": "[parameters('virtualNetwork').subnets.cstorSubnet.addressPrefix]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetwork').name)]"
      ]
    },
    {
      "condition": "[equals(parameters('cclearPublicIpAddress01').newOrExistingOrNone, 'new')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-11-01",
      "name": "[parameters('cclearPublicIpAddress01').name]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "[parameters('cclearPublicIpAddress01').publicIPAllocationMethod]",
        "dnsSettings": {
          "domainNameLabel": "[parameters('cclearPublicIpAddress01').domainNameLabel]"
        }
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/publicIPAddresses'), parameters('tagsByResource')['Microsoft.Network/publicIPAddresses'], null())]"
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-11-01",
      "name": "[format('{0}-nic', parameters('cClearVmName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[format('{0}-ipconfig-nic', parameters('cClearVmName'))]",
            "properties": {
              "subnet": {
                "id": "[variables('mgmtsubnetId')]"
              },
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[if(equals(parameters('cclearPublicIpAddress01').newOrExistingOrNone, 'none'), null(), variables('cclearpublicIPId'))]"
              }
            }
          }
        ]
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkInterfaces'), parameters('tagsByResource')['Microsoft.Network/networkInterfaces'], null())]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('cclearPublicIpAddress01').name)]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.mgmtSubnet.name)]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2021-03-01",
      "name": "[parameters('cClearVmName')]",
      "location": "[parameters('location')]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('VMSizeSettings').cclear]"
        },
        "storageProfile": {
          "imageReference": {
            "id": "[variables('cclearImageURI')]"
          },
          "osDisk": {
            "osType": "Linux",
            "createOption": "FromImage",
            "caching": "ReadWrite"
          },
          "dataDisks": [
            {
              "name": "[format('{0}-DataDisk1', parameters('cClearVmName'))]",
              "lun": 1,
              "createOption": "Empty",
              "diskSizeGB": 500,
              "caching": "None",
              "writeAcceleratorEnabled": true
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', parameters('cClearVmName')))]"
            }
          ]
        },
        "osProfile": {
          "computerName": "[parameters('cClearVmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), null(), variables('linuxConfiguration'))]"
        }
      },
      "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Compute/virtualMachines'), parameters('tagsByResource')['Microsoft.Compute/virtualMachines'], null())]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', parameters('cClearVmName')))]"
      ]
    }
  ]
}